// <auto-generated />
using System;
using DongPhuong.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DongPhuong.Infrastructure.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20240310203142_SeedPreparedGoods2")]
    partial class SeedPreparedGoods2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DongPhuong.Domain.Entities.Features.Drinks.Drink", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<decimal?>("Price")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("Size")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.ToTable("Drinks", "Domain");
                });

            modelBuilder.Entity("DongPhuong.Domain.Entities.Features.PackagedGoods.PackagedGood", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<decimal?>("Price")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal?>("Weight")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(5,2)");

                    b.HasKey("Id");

                    b.ToTable("PackagedGoods", "Domain");
                });

            modelBuilder.Entity("DongPhuong.Domain.Entities.Features.PreparedGoods.PreparedGood", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<decimal?>("Price")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.HasKey("Id");

                    b.ToTable("PreparedGoods", "Domain");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "4 fried shrimp & pork egg rolls",
                            Name = "chả giò",
                            Price = 5.00m
                        },
                        new
                        {
                            Id = 2,
                            Description = "2 shrimp & pork spring rolls",
                            Name = "gỏi cuốn",
                            Price = 5.00m
                        },
                        new
                        {
                            Id = 3,
                            Description = "grilled chicken vermicelli",
                            Name = "bún gà nướng",
                            Price = 11.00m
                        },
                        new
                        {
                            Id = 4,
                            Description = "grilled pork vermicelli",
                            Name = "bún thịt nướng",
                            Price = 11.00m
                        },
                        new
                        {
                            Id = 5,
                            Description = "grilled beef vermicelli",
                            Name = "bún nướng",
                            Price = 11.00m
                        },
                        new
                        {
                            Id = 6,
                            Description = "grilled shrimp vermicelli",
                            Name = "bún tôm nướng",
                            Price = 12.50m
                        },
                        new
                        {
                            Id = 7,
                            Description = "egg roll vermicelli",
                            Name = "bún chả giò",
                            Price = 11.00m
                        },
                        new
                        {
                            Id = 8,
                            Description = "lemon grass beef vermicelli",
                            Name = "bún bò xao",
                            Price = 12.50m
                        },
                        new
                        {
                            Id = 9,
                            Description = "vietnamese sausage vermicelli",
                            Name = "bún nem nướng",
                            Price = 11.00m
                        },
                        new
                        {
                            Id = 10,
                            Description = "grilled tofu vermicelli",
                            Name = "bún đậu hủ nướng",
                            Price = 9.00m
                        },
                        new
                        {
                            Id = 11,
                            Description = "grilled pork chop",
                            Name = "cơm suon nướng",
                            Price = 11.00m
                        },
                        new
                        {
                            Id = 12,
                            Description = "grilled chicken",
                            Name = "cơm gà nướng",
                            Price = 11.00m
                        },
                        new
                        {
                            Id = 13,
                            Description = "grilled pork",
                            Name = "cơm thịt nướng",
                            Price = 11.00m
                        },
                        new
                        {
                            Id = 14,
                            Description = "grilled beef",
                            Name = "cơm bò nướng",
                            Price = 11.00m
                        },
                        new
                        {
                            Id = 15,
                            Description = "grilled shrimp",
                            Name = "cơm tôm nướng",
                            Price = 13.00m
                        },
                        new
                        {
                            Id = 16,
                            Description = "korean short ribs",
                            Name = "cơm sườn đại hàn",
                            Price = 13.00m
                        },
                        new
                        {
                            Id = 17,
                            Description = "grilled tofu",
                            Name = "cơm đậu hủ nướng",
                            Price = 11.00m
                        },
                        new
                        {
                            Id = 18,
                            Description = "pork chop & shredded pork skin",
                            Name = "cơm bì suon",
                            Price = 12.00m
                        },
                        new
                        {
                            Id = 19,
                            Description = "grilled chicken vermicelli roll",
                            Name = "bánh hỏi gà nướng",
                            Price = 14.00m
                        },
                        new
                        {
                            Id = 20,
                            Description = "grilled pork vermicelli roll",
                            Name = "bánh hỏi thịt nướng",
                            Price = 14.00m
                        },
                        new
                        {
                            Id = 21,
                            Description = "grilled beef vermicelli roll",
                            Name = "bánh hỏi bò nướng",
                            Price = 14.00m
                        },
                        new
                        {
                            Id = 22,
                            Description = "grilled shrimp vermicelli roll",
                            Name = "bánh hỏi tôm nướng",
                            Price = 15.00m
                        },
                        new
                        {
                            Id = 23,
                            Description = "korean short ribs vermicelli roll",
                            Name = "bánh hỏi sườn đại hàn",
                            Price = 15.00m
                        },
                        new
                        {
                            Id = 24,
                            Description = "viet sausage vermicelli roll",
                            Name = "bánh hỏi nem nướng",
                            Price = 12.50m
                        },
                        new
                        {
                            Id = 25,
                            Description = "grilled tofu vermicelli roll",
                            Name = "bánh hỏi đậu hủ nướng",
                            Price = 12.50m
                        },
                        new
                        {
                            Id = 26,
                            Description = "combination pho",
                            Name = "phở đặc biệt",
                            Price = 12.00m
                        },
                        new
                        {
                            Id = 27,
                            Description = "brisket pho",
                            Name = "phở chin",
                            Price = 11.00m
                        },
                        new
                        {
                            Id = 28,
                            Description = "eye of round pho",
                            Name = "phở tái",
                            Price = 11.00m
                        },
                        new
                        {
                            Id = 29,
                            Description = "meatball pho",
                            Name = "phở bò viên",
                            Price = 11.00m
                        },
                        new
                        {
                            Id = 30,
                            Description = "shrimp pho",
                            Name = "phở tôm",
                            Price = 13.00m
                        },
                        new
                        {
                            Id = 31,
                            Description = "steamed veggies pho",
                            Name = "phở rau",
                            Price = 10.00m
                        },
                        new
                        {
                            Id = 32,
                            Description = "broth & noodles pho",
                            Name = "phở nước lèo",
                            Price = 9.00m
                        },
                        new
                        {
                            Id = 33,
                            Description = "any pho option",
                            Name = "kids phở",
                            Price = 5.00m
                        },
                        new
                        {
                            Id = 34,
                            Description = "grilled chicken",
                            Name = "salad gà nướng",
                            Price = 10.00m
                        },
                        new
                        {
                            Id = 35,
                            Description = "grilled pork",
                            Name = "salad thịt nướng",
                            Price = 10.00m
                        },
                        new
                        {
                            Id = 36,
                            Description = "grilled beef",
                            Name = "salad bò nướng",
                            Price = 11.00m
                        },
                        new
                        {
                            Id = 37,
                            Description = "grilled shrimp",
                            Name = "salad tôm nướng",
                            Price = 12.00m
                        },
                        new
                        {
                            Id = 38,
                            Description = "egg roll (bún)",
                            Name = "salad chả giò",
                            Price = 10.00m
                        },
                        new
                        {
                            Id = 39,
                            Description = "vietnamese sausage",
                            Name = "salad nem nướng",
                            Price = 11.00m
                        },
                        new
                        {
                            Id = 40,
                            Description = "grilled tofu",
                            Name = "salad đậu hủ nướng",
                            Price = 10.00m
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
